version: '3'
services:
  rabbitmq:
    image: rabbitmq:3.9-management-alpine
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 5s
      retries: 3
    restart: always

  auth:
    build:
      context: ./auth/src
      dockerfile: Dockerfile
    ports:
      - 5050:5050
    environment:
      - AUTH_PORT=5050
      - SECRET_KEY=batman
      - PG_HOST=db
      - PG_USER=postgres
      - PG_PASSWORD=postgres
      - PG_DATABASE=postgres
      - PG_PORT=5432
    env_file:
      - ./.env
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - app-network
 

  calendar:
    build:
      context: ./calendar/src
      dockerfile: Dockerfile
    ports:
      - 5000:5000
    env_file:
      - ./.env
    environment:
      - CALENDAR_PORT=5000
      - SECRET_KEY=batman
      - PG_HOST=db
      - PG_USER=postgres
      - PG_PASSWORD=postgres
      - PG_DATABASE=postgres
      - PG_PORT=5432

    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - app-network
    restart: always


  db:
    image: postgres:latest
    ports:
      - 5432:5432
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DATABASE=postgres
      - POSTGRES_PORT=5432
    logging:
          options:
            max-size: 10m
            max-file: "3"

    volumes:
      - pgdata:/var/lib/postgresql/data
      
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - 3000:3000
    
    depends_on:
      - auth
      - calendar
    networks:
      - app-network
    restart: always

  api_docs:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - 4000:4000
    env_file:
      - ./.env
    depends_on:
      - auth
      - calendar
    networks:
      - app-network
    restart: always

networks:
  app-network:

volumes:
  pgdata: